# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  # cancel-in-progress: false
  # that ra nen cancel vi cung chi deploy moi nhat
  cancel-in-progress: true

# Define reusable matrix for multiple projects
jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.set-matrix.outputs.projects }}
    steps:
      - name: Define matrix projects
        id: set-matrix
        run: |
          echo "projects=[\"wheel\", \"wheel2\", \"wheel3\"]" >> $GITHUB_OUTPUT

  # Build job for multiple projects using matrix strategy
  build:
    runs-on: ubuntu-latest
    environment: debug
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        project: ${{ fromJson(needs.setup.outputs.projects) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            doancu/${{ matrix.project }}
          sparse-checkout-cone-mode: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          # cache: yarn
          # cache-dependency-path: doancu/${{ matrix.project }}/yarn.lock

      - name: Enable Corepack
        run: corepack enable

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        working-directory: doancu/${{ matrix.project }}
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - name: Get yarn lock path
        id: yarnlock-path
        run: echo "path=doancu/${{ matrix.project }}/yarn.lock" >> $GITHUB_OUTPUT

      - name: Cache Yarn dependencies
        uses: actions/cache@v4
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ matrix.project }}-${{ hashFiles(steps.yarnlock-path.outputs.path) }}
          restore-keys: |
            ${{ runner.os }}-yarn-${{ matrix.project }}-
            ${{ runner.os }}-yarn-

      - name: Install dependencies for ${{ matrix.project }}
        uses: borales/actions-yarn@v4
        with:
          cmd: install
          dir: doancu/${{ matrix.project }}

      - name: Get installed Playwright version
        id: playwright-version
        working-directory: doancu/${{ matrix.project }}
        run: |
          version=$(jq -r '.dependencies["@playwright/test"] // .devDependencies["@playwright/test"] // "unknown"' package.json)
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright browsers
        uses: borales/actions-yarn@v4
        with:
          cmd: playwright install --with-deps
          dir: doancu/${{ matrix.project }}

      # need to build for playwright test, also only lint for errors anyway
      - name: Build ${{ matrix.project }} production
        uses: borales/actions-yarn@v4
        with:
          cmd: build
          dir: doancu/${{ matrix.project }}
        env:
          VITE_BASE_URL: /web-1-best-bag/doancu/${{ matrix.project }}/dist

      - name: Lint ${{ matrix.project }}
        continue-on-error: true
        uses: borales/actions-yarn@v4
        with:
          cmd: lint
          dir: doancu/${{ matrix.project }}

      - name: Test ${{ matrix.project }}
        continue-on-error: true
        uses: borales/actions-yarn@v4
        with:
          cmd: test
          dir: doancu/${{ matrix.project }}

      # - name: Remove node_modules for ${{ matrix.project }}
      #   uses: JesseTG/rm@v1.0.3
      #   with:
      #     path: doancu/${{ matrix.project }}/node_modules

      # - name: Remove yarn local caches for ${{ matrix.project }}
      #   uses: JesseTG/rm@v1.0.3
      #   with:
      #     path: doancu/${{ matrix.project }}/.yarn

      - name: Upload static files for ${{ matrix.project }} as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.project }}-dist
          path: doancu/${{ matrix.project }}/dist

  # Deploy job
  deploy:
    runs-on: ubuntu-latest
    needs: [setup, build]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: repo

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*-dist"
          path: artifact

      - name: Copy artifacts
        run: |
          json_projects="${{ needs.setup.outputs.projects }}"
          readarray -t projects_array < <(echo "$json_projects" | jq -r '.[]')
          for project in "${projects_array[@]}"; do
            mkdir -p "doancu/$project/dist"
            source_dir="artifact/${project}-dist"
            if [ -d "$source_dir" ]; then
              cp -r "$source_dir"/* "doancu/$project/dist/"
            else
              echo "Error: Source artifact directory '$source_dir' not found for project '$project'."
              exit 1
            fi
          done

      - name: Upload static files as artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload repository folder
          path: repo

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
